{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/http","result":{"data":{"post":{"__typename":"MdxPost","slug":"/http","title":"What is HTTP?","date":"29.05.2021","tags":null,"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What is HTTP?\",\n  \"date\": \"2021-05-29T00:00:00.000Z\",\n  \"slug\": \"/http\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"What is HTTP?\"), mdx(\"p\", null, \"HTTP stands for Hyper Text Transfer Protocol. Lets break it down word by word\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hyper Text -  They are text which can contain link to other information. For ex: HTML pages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transfer - to move from one place to another\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protocol - set of instructions/rules\")), mdx(\"p\", null, \"So basically HTTP is a set of rules to transfer hyper text between web server and client.\"), mdx(\"p\", null, \"HTTP is an application layer protocol. The application layer is the one with which users can interact. HTTP specs only define the structure of the data to be transferred and how it is actually transferred is taken care of by lower-level protocols.\"), mdx(\"p\", null, \"HTTP uses TCP/UDP to transfer data between server and client. TCP and UDP are transport layer protocols that are responsible for transferring between devices (We will see how data is actually transferred in my next post). HTTP clients and servers communicate using requests and responses.\"), mdx(\"p\", null, \"HTTP is a stateless protocol. It means each request is independent of another request. In other words, if a user makes multiple request servers, then it does not know that there are 4 requests made by the user, at least not according to HTTP protocol. It can be tracked by other means such as sessions, cookies, etc..,\"), mdx(\"h3\", null, \"HTTP Request Structure\"), mdx(\"p\", null, \"A HTTP request consists of \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Request line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Headers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Body (Can be optional)\")), mdx(\"h4\", null, \"Request Line\"), mdx(\"p\", null, \"Request line consists of HTTP Version and request type.\"), mdx(\"p\", null, \"Common request types are\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GET - Used to get a resource.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"POST - Used to create a resource. Most people will use this type for updating also but the convention is to use POST only for creation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PUT - Used to update a resource.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PATCH - Used to update a resource partially.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HEAD - Used to get only headers of resources. This can be useful if we want to know the content length or accepted data format without requesting for whole data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"OPTIONS - Used to see which headers are supported.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DELETE - Used to delete a resource.\")), mdx(\"h4\", null, \"Headers\"), mdx(\"p\", null, \"These are useful if server/client wants to send additional information.\"), mdx(\"p\", null, \"For ex: User Agent, Time etc.., can be sent in headers\"), mdx(\"h4\", null, \"Body\"), mdx(\"p\", null, \"These are data to be transferred along with request. GET request do not have body.\"), mdx(\"p\", null, \"Example for request is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"GET / HTTP/2\\nHost: www.google.com\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\nAccept-Language: en-US,en;q=0.5\\nAccept-Encoding: gzip, deflate, br\\n\")), mdx(\"h3\", null, \"HTTP Response Structure\"), mdx(\"p\", null, \"A HTTP response consists of\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Status Line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Headers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Body\")), mdx(\"h4\", null, \"Status Line\"), mdx(\"p\", null, \"This contains HTTP status code that indicates the status of the request. You can see the list of status codes \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\"\n  }, \"here\")), mdx(\"h4\", null, \"Header\"), mdx(\"p\", null, \"This consists of additional information about the response. For ex: Content length, Content type, etc.,\"), mdx(\"h4\", null, \"Body\"), mdx(\"p\", null, \"This contains the response body. This can be HTML page or XML or JSON etc..,\"), mdx(\"p\", null, \"Example for HTTP response\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"HTTP/2 200 OK\\ndate: Sat, 29 May 2021 16:30:20 GMT\\ncontent-type: text/html; charset=UTF-8\\ncontent-length: 35706\\n\\n<!doctype html><html>.......</html>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"What is HTTP? HTTP stands for Hyper Text Transfer Protocol. Lets break it down word by word Hyper Text -  They are text which can containâ€¦","timeToRead":2,"banner":null}},"pageContext":{"slug":"/http","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}