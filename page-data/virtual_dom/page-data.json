{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/virtual_dom","result":{"data":{"post":{"__typename":"MdxPost","slug":"/virtual_dom","title":"What is Virtual Dom? And Why is it faster?","date":"16.05.2020","tags":null,"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What is Virtual Dom? And Why is it faster?\",\n  \"date\": \"2020-05-16T00:00:00.000Z\",\n  \"slug\": \"/virtual_dom\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"According to React docs virtual DOM is\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The virtual DOM (VDOM) is a programming concept where an ideal, or \\u201Cvirtual\\u201D, representation of a UI is kept in memory and synced with the \\u201Creal\\u201D DOM by a library such as ReactDOM\")), mdx(\"p\", null, \"Before diving into virtual DOM, a quick intro to DOM\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web\")), mdx(\"p\", null, \"So basically DOM is a tree structured representation of documents such as XML and HTML. We can use the DOM to add, remove or update elements in those documents.\"), mdx(\"h3\", null, \"What is virtual DOM?\"), mdx(\"p\", null, \"Virtual DOM is a representation of the DOM. The creation of real dom will be handled by browsers. Modern frameworks like react, vue, etc.., will create a tree of elements similar to real dom in memory this is called virtual DOM.\"), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<ul class=\\\"fruits\\\">\\n  <li>Apple</li>\\n  <li>Orange</li>\\n  <li>Banana</li>\\n</ul>\\n\")), mdx(\"p\", null, \"The above code can be represented in the virtual DOM as below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"// Virtual DOM representation\\n{\\n  type: \\\"ul\\\",\\n  props: {\\n    \\\"class\\\": \\\"fruits\\\"\\n  },\\n  children: [\\n    {\\n      type: \\\"li\\\",\\n      props: null,\\n      children: [\\n        \\\"Apple\\\"\\n      ]\\n    },\\n    {\\n      type: \\\"li\\\",\\n      props: null,\\n      children: [\\n        \\\"Orange\\\"\\n      ]\\n    },\\n    {\\n      type: \\\"li\\\",\\n      props: null,\\n      children: [\\n        \\\"Banana\\\"\\n      ]\\n    }\\n  ]\\n}\\n\")), mdx(\"h3\", null, \"Why do we need virtual DOM?\"), mdx(\"p\", null, \"In earlier days when SPA wasn\\u2019t much popular, rendering was done on the server-side. So for every user interaction/request, the server will send a new page to render.\"), mdx(\"p\", null, \"In the case of SPA, there will only one document and in that same document, all DOM manipulations will be done. So for complex projects, many unoptimized DOM operations might be used.\"), mdx(\"p\", null, \"For example: Let\\u2019s say we want to render list from an array. we can do it like below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function generateList(fruits) {\\n  let ul = document.createElement('ul');\\n  document.getElementByClassName('.fruits').appendChild(ul);\\n\\n  fruits.forEach(function (item) {\\n    let li = document.createElement('li');\\n    ul.appendChild(li);\\n    li.innerHTML += item;\\n  });\\n\\n  return ul;\\n}\\n\\nlet fruits = ['Apple', 'Orange', 'Banana'];\\ndocument.getElementById('#list').innerHtml = generateList(fruits);\\n\")), mdx(\"p\", null, \"Now if the list changes, above method can be called again to generate list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javavscript\"\n  }, \"fruits = ['Pineapple', 'Orange', 'Banana'];\\ndocument.getElementById('#list').innerHtml = generateList(fruits);\\n\")), mdx(\"p\", null, \"In the above code, a new list is generated and it is set in the document. The problem with this approach is only the text of single fruit is changed but a new list is generated and updated to DOM. This operation is slow in DOM. We can change the unoptimised code like below. This will reduce the number of operations in DOM.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"document.querySelector('li').innerText = fruits[0];\\n\")), mdx(\"p\", null, \"The final result of both unoptimized and optimized code is same but the cost of unoptimized DOM operation is performance. If the size of list large then you can see the difference. This was the problem we had in older frameworks like backbone js.\"), mdx(\"p\", null, \"So answer to our big question \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Why do we need virtual DOM?\"), \" is to solve the above problem.\"), mdx(\"p\", null, \"What modern frameworks like react does is whenever something is changed in the state/props, a new virtual DOM representation will be created and it will be compared with the previous one. In our example, the only change will be \\u201CApple\\u201D to \\u201CPineapple\\u201D. Since only text is changed instead of replacing whole list react will update the DOM by the following code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"document.querySelector('li').innerText = 'Pineapple';\\n\")), mdx(\"h3\", null, \"How virtual DOM is faster than real DOM?\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"No\"), \", virtual DOM is not faster than the real DOM. Under the hood virtual DOM also uses real DOM to render the page or content. So there is no way that virtual DOM is faster than real dom.\"), mdx(\"p\", null, \"Then why everyone says virtual DOM is faster? It is not that virtual DOM is faster. By using virtual DOM, we can find out what is changed and with that, we can apply only those changes to real DOM instead of replacing entire DOM.\"), mdx(\"h3\", null, \"Is Virtual DOM the only way to reduce costly DOM operations?\"), mdx(\"p\", null, \"Not necessarily, other frameworks like ember js, angular, and svelte uses different approaches to solve the very same problem.\"), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"Virtual DOM is a representation of real DOM. Whenever states are changed new virtual DOM will be created and will be compared with previous virtual DOM. And then DOM operations will be applied for those specific changes. The cost of virtual DOM is calculating diff with another virtual DOM. For a big project with lots of components, diff calculation will take time. You can read more about how that is handled \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/reconciliation.html\"\n  }, \"here\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"According to React docs virtual DOM is The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/virtual_dom","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}