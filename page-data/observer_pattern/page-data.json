{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/observer_pattern","result":{"data":{"post":{"__typename":"MdxPost","slug":"/observer_pattern","title":"Observer Pattern","date":"23.05.2021","tags":null,"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Observer Pattern\",\n  \"date\": \"2021-05-23T00:00:00.000Z\",\n  \"slug\": \"/observer_pattern\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Last week we learned about Strategy pattern, today we are going to see about Observer pattern.\"), mdx(\"p\", null, \"The Observer pattern is a behavioral design pattern in which an object can have multiple dependents(can be called observers) which will get notified when the state of the object changes.\"), mdx(\"p\", null, \"Some of the terms we need to know are\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observer - Dependents which should get notified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable - Object which will notify its observers\")), mdx(\"p\", null, \"A real-world example of this pattern is magazine company subscription service. Let's say we are subscribing to a magazine. Here the magazine company is the object they will have the list of dependents (people who are subscribed to their magazine). Whenever a new magazine is published, it will be sent to all the subscribers.\"), mdx(\"p\", null, \" Some of the technical examples of Observer pattern are\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Model View Controller Pattern (Here View represents  \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Observer\"), \" and Model represents \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Observable\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"LiveData\"), \" in Android\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In Social media platforms like Facebook/Twitter, a person can post or update his status and their followers will get a notification.\")), mdx(\"p\", null, \"Lets see how we can implement this pattern in Python\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class Subject(object):\\n    def __init__(self):\\n        self.observers = []\\n\\n    def subscribe(self, observer):\\n        self.observers.append(observer)\\n\\n    def unsubscribe(self, observer):\\n        self.observers.remove(observer)\\n\\n    def notify(self, *args, **kwargs):\\n        for observer in self.observers:\\n            observer.notify(*args, **kwargs)\\n\\nclass EmailSender(Subject):\\n    pass\\n\")), mdx(\"p\", null, \"In the above code, we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subject\"), \" which has methods for subscribing/unsubscribing observers. Also, we have a method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"notify\"), \", whenever the user wants to send emails to his subscribers he can call this method.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note that we have written the common code for observer pattern in a separate class called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subject\"), \" . This is for reusability and for cleaner code.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class EmailObserver(object):\\n    def __init__(self, email):\\n        self.to_address = email\\n\\n    def notify(self):\\n        self.send_email()\\n\\n    def send_email(self):\\n        print(f\\\"Sending email to {self.to_address}\\\")\\n\\nif __name__ == '__main__':\\n    email_sender = EmailSender()\\n    subscriber1 = EmailObserver(\\\"abc@gmail.com\\\")\\n    subscriber2 = EmailObserver(\\\"efg@gmail.com\\\")\\n\\n    email_sender.subscribe(subscriber1)\\n    email_sender.subscribe(subscriber2)\\n    email_sender.notify()\\n\\n    print(\\\"Unsubscribing subscriber1\\\")\\n    email_sender.unsubscribe(subscriber1)\\n    email_sender.notify()\\n\")), mdx(\"p\", null, \"In the above code we have defined \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observer\"), \" and subscribed it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EmailSender\")), mdx(\"p\", null, \"The above code will output the following\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"Sending email to abc@gmail.com\\nSending email to efg@gmail.com\\nUnsubscribing subscriber1\\nSending email to efg@gmail.com\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Last week we learned about Strategy pattern, today we are going to see about Observer pattern. The Observer pattern is a behavioral designâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/observer_pattern","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}